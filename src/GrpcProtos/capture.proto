// Copyright (c) 2020 The Orbit Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package orbit_grpc_protos;

import "module.proto";
import "tracepoint.proto";

// This is needed by LockFreeBufferCaptureEventProducer.
option cc_enable_arenas = true;

message InstrumentedFunction {
  string file_path = 1;
  string file_build_id = 6;
  uint64 file_offset = 2;
  uint64 function_id = 3;

  enum FunctionType {
    kRegular = 0;
    kTimerStart = 1;
    kTimerStop = 2;
  }
  FunctionType function_type = 4;
  string function_name = 5;
}

// Api functions are declared in Orbit.h. They are implemented in user code
// through the ORBIT_API_INSTANTIATE macro. Those functions are used to query
// the tracee for Orbit specific information. See "FindApiFunction" for more
// details.
message ApiFunction {
  string module_path = 1;
  string module_build_id = 2;
  uint64 address = 3;
  string name = 4;
  uint64 api_version = 5;
}

message CaptureOptions {
  bool trace_context_switches = 1;
  int32 pid = 2;
  double samples_per_second = 3;
  // Expected to be "uint16".
  uint32 stack_dump_size = 16;

  enum UnwindingMethod {
    kUndefined = 0;
    kFramePointers = 1;
    kDwarf = 2;
  }
  UnwindingMethod unwinding_method = 4;

  repeated InstrumentedFunction instrumented_functions = 5;

  bool trace_thread_state = 8;

  bool trace_gpu_driver = 6;

  repeated TracepointInfo instrumented_tracepoint = 7;

  bool enable_introspection = 9;

  uint64 max_local_marker_depth_per_command_buffer = 10;

  bool collect_memory_info = 11;
  uint64 memory_sampling_period_ns = 12;
  bool enable_cgroup_memory = 15;

  repeated ApiFunction api_functions = 13;

  bool enable_api = 14;
}

// For CaptureEvents with a duration, excluding for now GPU-related ones, we
// represent the time interval as (duration_ns, end_timestamp_ns). As durations
// are smaller in magnitude than absolute timestamps, and as protobufs use
// variable-length encoding, this saves some bandwidth compared to
// (start_timestamp_ns, end_timestamp_ns).
// The pair (duration_ns, end_timestamp_ns) was preferred over
// (start_timestamp_ns, duration_ns) because this way, when perf_event_open
// events are processed in order, the CaptureEvents are sorted by the only
// absolute timestamp contained in them (as they are obviously generated when
// the "end" perf_event_open event is processed).

message SchedulingSlice {
  reserved 4;
  int32 pid = 1;
  int32 tid = 2;
  int32 core = 3;
  uint64 duration_ns = 6;
  uint64 out_timestamp_ns = 5;
}

message FunctionCall {
  reserved 4;
  int32 pid = 1;
  int32 tid = 2;
  uint64 function_id = 3;
  uint64 duration_ns = 9;
  uint64 end_timestamp_ns = 5;
  int32 depth = 6;
  uint64 return_value = 7;
  repeated uint64 registers = 8;
}

message IntrospectionScope {
  reserved 3;
  int32 pid = 1;
  int32 tid = 2;
  uint64 duration_ns = 7;
  uint64 end_timestamp_ns = 4;
  int32 depth = 5;
  repeated uint64 registers = 6;
}

message ApiEvent {
  int32 pid = 1;
  int32 tid = 2;
  uint64 timestamp_ns = 3;

  // The fields below are used to encode orbit_api::EncodedEvent events. This is
  // done mainly for the performance gain of not having to allocate memory out
  // of the Arena for strings, but also to emulate the old uprobe-based use of
  // registers to encode events. To review after deprecation (b/182485096).
  fixed64 r0 = 4;
  fixed64 r1 = 5;
  fixed64 r2 = 6;
  fixed64 r3 = 7;
  fixed64 r4 = 8;
  fixed64 r5 = 9;
}

message Callstack {
  repeated uint64 pcs = 1;

  // This enum describes whether the corresponding stack sample was unwound
  // successfully (kComplete), or the (likely) reason for failure.
  enum CallstackType {
    kComplete = 0;
    kDwarfUnwindingError = 1;
    kFramePointerUnwindingError = 2;
    kInUprobes = 3;
    kUprobesPatchingFailed = 4;
    kStackTopForDwarfUnwindingTooSmall = 5;
    kStackTopDwarfUnwindingError = 6;
  }
  CallstackType type = 2;
}

message InternedCallstack {
  uint64 key = 1;
  Callstack intern = 2;
}

message CallstackSample {
  int32 pid = 1;
  int32 tid = 2;
  uint64 callstack_id = 3;
  uint64 timestamp_ns = 4;
}

message FullCallstackSample {
  int32 pid = 1;
  int32 tid = 2;
  Callstack callstack = 3;
  uint64 timestamp_ns = 4;
}

message InternedString {
  uint64 key = 1;
  // This is a string, we use bytes to avoid UTF-8 validation.
  bytes intern = 2;
}

message InternedTracepointInfo {
  uint64 key = 1;
  TracepointInfo intern = 2;
}

message TracepointEvent {
  int32 pid = 1;
  int32 tid = 2;
  uint64 timestamp_ns = 3;
  int32 cpu = 4;
  uint64 tracepoint_info_key = 5;
}

message FullTracepointEvent {
  int32 pid = 1;
  int32 tid = 2;
  uint64 timestamp_ns = 3;
  int32 cpu = 4;
  TracepointInfo tracepoint_info = 5;
}

message FullGpuJob {
  int32 pid = 1;
  int32 tid = 2;
  uint32 context = 3;
  uint32 seqno = 4;
  int32 depth = 5;
  uint64 amdgpu_cs_ioctl_time_ns = 6;
  uint64 amdgpu_sched_run_job_time_ns = 7;
  uint64 gpu_hardware_start_time_ns = 8;
  uint64 dma_fence_signaled_time_ns = 9;
  // This is a string, we use bytes to avoid UTF-8 validation.
  bytes timeline = 10;
}

message GpuJob {
  int32 pid = 1;
  int32 tid = 2;
  uint32 context = 3;
  uint32 seqno = 4;
  int32 depth = 5;
  uint64 amdgpu_cs_ioctl_time_ns = 6;
  uint64 amdgpu_sched_run_job_time_ns = 7;
  uint64 gpu_hardware_start_time_ns = 8;
  uint64 dma_fence_signaled_time_ns = 9;
  uint64 timeline_key = 10;
}

message GpuQueueSubmission {
  GpuQueueSubmissionMetaInfo meta_info = 1;
  repeated GpuSubmitInfo submit_infos = 2;
  repeated GpuDebugMarker completed_markers = 3;
  // This is the total number of begin markers submitted in this submission.
  int32 num_begin_markers = 4;
}

message GpuQueueSubmissionMetaInfo {
  int32 tid = 1;
  int32 pid = 4;
  uint64 pre_submission_cpu_timestamp = 2;
  uint64 post_submission_cpu_timestamp = 3;
}

message GpuSubmitInfo {
  repeated GpuCommandBuffer command_buffers = 1;
}

message GpuCommandBuffer {
  uint64 begin_gpu_timestamp_ns = 1;
  uint64 end_gpu_timestamp_ns = 2;
}

message GpuDebugMarkerBeginInfo {
  // Begin markers can be submitted in a different submission then the end
  // markers, thus the submission meta info of a begin marker might differ from
  // the one of the submission containing the complete debug marker.
  GpuQueueSubmissionMetaInfo meta_info = 1;
  uint64 gpu_timestamp_ns = 2;
}

message GpuDebugMarker {
  GpuDebugMarkerBeginInfo begin_marker = 1;
  uint64 end_gpu_timestamp_ns = 2;
  uint64 text_key = 3;
  int32 depth = 4;
  Color color = 5;
}

message Color {
  // Color ranges are [0.f, 1.f] for the following fields.
  float red = 1;
  float green = 2;
  float blue = 3;
  float alpha = 4;
}

message ThreadName {
  int32 pid = 1;
  int32 tid = 2;
  // This is a string, we use bytes to avoid UTF-8 validation.
  bytes name = 3;
  uint64 timestamp_ns = 4;
}

message ThreadStateSlice {
  reserved 4;
  int32 pid = 1;  // pid is currently not set as we don't have the information.
  int32 tid = 2;

  // These are the ones listed in
  // /sys/kernel/debug/tracing/events/sched/sched_switch/format and in
  // https://github.com/torvalds/linux/blob/master/fs/proc/array.c in
  // task_state_array[], with the difference that the OS doesn't distinguish
  // between "running" (scheduled on a CPU) and "runnable" (ready to be
  // scheduled but not actually scheduled), rather they are the same state
  // (often referred to as "running", sometimes as "runnable or running").
  enum ThreadState {
    kRunning = 0;
    kRunnable = 1;
    kInterruptibleSleep = 2;
    kUninterruptibleSleep = 3;
    kStopped = 4;
    kTraced = 5;
    kDead = 6;
    kZombie = 7;
    kParked = 8;
    kIdle = 9;
  }
  ThreadState thread_state = 3;

  uint64 duration_ns = 6;
  uint64 end_timestamp_ns = 5;
}

message AddressInfo {
  uint64 absolute_address = 1;
  uint64 offset_in_function = 2;
  uint64 function_name_key = 3;
  uint64 module_name_key = 4;
}

message FullAddressInfo {
  uint64 absolute_address = 1;
  uint64 offset_in_function = 2;
  // This is a string, we use bytes to avoid UTF-8 validation.
  bytes function_name = 3;
  // This is a string, we use bytes to avoid UTF-8 validation.
  bytes module_name = 4;
}

message ModuleUpdateEvent {
  int32 pid = 1;
  uint64 timestamp_ns = 2;
  ModuleInfo module = 3;
}

message SystemMemoryUsage {
  uint64 timestamp_ns = 1;
  // These fields are retrieved from /proc/meminfo. See
  // https://man7.org/linux/man-pages/man5/proc.5.html for the documentation.
  int64 total_kb = 2;
  int64 free_kb = 3;
  int64 available_kb = 4;
  int64 buffers_kb = 5;
  int64 cached_kb = 6;
  // These fields are retrieved from /proc/vmstat. See
  // https://man7.org/linux/man-pages/man5/proc.5.html for the documentation.
  int64 pgfault = 7;
  int64 pgmajfault = 8;
}

message ProcessMemoryUsage {
  reserved 3;
  int32 pid = 1;
  uint64 timestamp_ns = 2;
  // These fields are retrieved from /proc/<pid>/stat. See
  // https://man7.org/linux/man-pages/man5/proc.5.html for the documentation.
  int64 minflt = 4;
  int64 majflt = 5;
  // This field is retrieved from /proc/<pid>/status. See
  // https://man7.org/linux/man-pages/man5/proc.5.html for the documentation.
  int64 rss_anon_kb = 6;
}

message CGroupMemoryUsage {
  string cgroup_name = 1;
  uint64 timestamp_ns = 2;
  // This field is retrieved from
  // /sys/fs/cgroup/memory/<cgroup_name>/memory.limit_in_bytes. See
  // https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt for the
  // documentation.
  int64 limit_bytes = 3;
  // These fields are retrieved from
  // /sys/fs/cgroup/memory/<cgroup_name>/memory.stat. See
  // https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt section 5.2
  // for the documentation.
  int64 rss_bytes = 4;
  int64 mapped_file_bytes = 5;
  int64 pgfault = 6;
  int64 pgmajfault = 7;
  int64 unevictable_bytes = 8;
  int64 inactive_anon_bytes = 9;
  int64 active_anon_bytes = 10;
  int64 inactive_file_bytes = 11;
  int64 active_file_bytes = 12;
}

message MemoryEventWrapper {
  uint64 timestamp_ns = 1;
  SystemMemoryUsage system_memory_usage = 2;
  ProcessMemoryUsage process_memory_usage = 3;
  CGroupMemoryUsage cgroup_memory_usage = 4;
}

message ModulesSnapshot {
  int32 pid = 1;
  uint64 timestamp_ns = 2;
  repeated ModuleInfo modules = 3;
}

message ThreadNamesSnapshot {
  // This is a system-wide snapshot, hence it does not have a pid
  uint64 timestamp_ns = 1;
  repeated ThreadName thread_names = 2;
}

message CaptureFinished {
  enum Status {
    kSuccessful = 0;
    kFailed = 1;
  };

  Status status = 1;
  string error_message = 2;
}

message CaptureStarted {
  int32 process_id = 1;
  string executable_path = 2;
  string executable_build_id = 3;
  uint64 capture_start_timestamp_ns = 4;
  CaptureOptions capture_options = 5;
}

message WarningEvent {
  uint64 timestamp_ns = 1;
  // This is a string, we use bytes to avoid UTF-8 validation.
  bytes message = 2;
}

message InfoEvent {
  uint64 timestamp_ns = 1;
  // This is a string, we use bytes to avoid UTF-8 validation.
  bytes message = 2;
}

message ErrorEnablingOrbitApiEvent {
  uint64 timestamp_ns = 1;
  // This is a string, we use bytes to avoid UTF-8 validation.
  bytes message = 2;
}

message ClockResolutionEvent {
  uint64 timestamp_ns = 1;
  uint64 clock_resolution_ns = 2;
}

message ErrorsWithPerfEventOpenEvent {
  uint64 timestamp_ns = 1;
  // This is a string, we use bytes to avoid UTF-8 validation.
  repeated bytes failed_to_open = 2;
}

message MetadataEvent {
  oneof event {
    WarningEvent warning_event = 1;
    InfoEvent info_event = 2;
    ErrorEnablingOrbitApiEvent error_enabling_orbit_api_event = 3;
    ClockResolutionEvent clock_resolution_event = 4;
    ErrorsWithPerfEventOpenEvent errors_with_perf_event_open_event = 5;
  }
}

message ClientCaptureEvent {
  reserved 23, 28, 29;

  oneof event {
    // Note that field numbers from 1-15 take only 1 byte to encode
    // https://developers.google.com/protocol-buffers/docs/proto#assigning_field_numbers
    // use them for high frequency events. For the rest please assign
    // numbers starting with 16.
    //
    // Please keep these alphabetically ordered.

    // Even though AddressInfo is a high-frequency event
    // it is going to go away in the future when we switch to
    // frame-pointer based unwinding.
    AddressInfo address_info = 16;
    ApiEvent api_event = 9;
    CallstackSample callstack_sample = 1;
    CaptureFinished capture_finished = 27;
    CaptureStarted capture_started = 24;
    FunctionCall function_call = 2;
    GpuJob gpu_job = 3;
    GpuQueueSubmission gpu_queue_submission = 4;
    InternedCallstack interned_callstack = 5;
    InternedString interned_string = 18;
    InternedTracepointInfo interned_tracepoint_info = 19;
    IntrospectionScope introspection_scope = 20;
    MemoryEventWrapper memory_event_wrapper = 31;
    MetadataEvent metadata_event = 30;
    ModulesSnapshot modules_snapshot = 25;
    ModuleUpdateEvent module_update_event = 21;
    SchedulingSlice scheduling_slice = 6;
    ThreadName thread_name = 22;
    ThreadNamesSnapshot thread_names_snapshot = 26;
    ThreadStateSlice thread_state_slice = 7;
    TracepointEvent tracepoint_event = 8;
  }
}

message ProducerCaptureEvent {
  oneof event {
    // Note that field numbers from 1-15 take only 1 byte to encode
    // https://developers.google.com/protocol-buffers/docs/proto#assigning_field_numbers
    // use them for high frequency events. For the rest please assign
    // numbers starting with 16.
    //
    // Please keep these alphabetically ordered.
    ApiEvent api_event = 10;
    CallstackSample callstack_sample = 1;
    CaptureStarted capture_started = 23;
    FullCallstackSample full_callstack_sample = 2;

    // Even though AddressInfo is a high-frequency event
    // it is going to go away in the future when we switch to
    // frame-pointer based unwinding.
    CGroupMemoryUsage cgroup_memory_usage = 26;
    FullAddressInfo full_address_info = 16;
    FullGpuJob full_gpu_job = 3;
    FullTracepointEvent full_tracepoint_event = 4;
    FunctionCall function_call = 5;
    GpuQueueSubmission gpu_queue_submission = 6;
    InternedCallstack interned_callstack = 7;
    InternedString interned_string = 18;
    IntrospectionScope introspection_scope = 19;
    MemoryEventWrapper memory_event_wrapper = 29;
    MetadataEvent metadata_event = 28;
    ModulesSnapshot modules_snapshot = 25;
    ModuleUpdateEvent module_update_event = 20;
    ProcessMemoryUsage process_memory_usage = 27;
    SchedulingSlice scheduling_slice = 8;
    SystemMemoryUsage system_memory_usage = 22;
    ThreadName thread_name = 21;
    ThreadNamesSnapshot thread_names_snapshot = 24;
    ThreadStateSlice thread_state_slice = 9;
  }
}
